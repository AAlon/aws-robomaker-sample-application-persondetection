AWSTemplateFormatVersion: 2010-09-09
Parameters:
  BucketName:
    Type: String
    AllowedPattern: '[a-z][a-z0-9\-]*'
    Description: Name of the Amazon S3 bucket containing images of faces
    Default: persondetectionsample
  SourceBucket:
    Type: String
    AllowedPattern: '[a-z][a-z0-9\-]*'
    Description: Initial bucket to copy images from
    Default: b9-private-beta-assets
  CollectionId:
    Type: String
    AllowedPattern: '[a-zA-Z0-9_.\-]+'
    Description: Name of Amazon Rekognition collection name
    Default: personDetectionCollection
  RekognitionRoleName:
    Type: String
    AllowedPattern: '[a-zA-Z0-9_.\-]+'
    Description: >-
      Name of role that will be created for Amazon Rekognition to read data from
      Amazon Kinesis Video Streams and write data to a Kinesis Data Stream
    Default: personDetectionRekognitionServiceRole
  StreamProcessorName:
    Type: String
    AllowedPattern: '[a-zA-Z0-9_.\-]+'
    Description: >-
      The name of the Amazon Rekognition stream processor that will process the
      incoming video stream
    Default: personDetectionProcessor
  KinesisVideoStreamName:
    Type: String
    AllowedPattern: '[a-zA-Z0-9_.\-]+'
    Description: >-
      The name of the incoming Amazon Kinesis video stream. This must match the
      "stream_name" given in the config/kvs_config.yaml file.
    Default: personDetectionStream
  RekognitionDataStreamName:
    Type: String
    AllowedPattern: '[a-zA-Z0-9_.\-]+'
    Description: >-
      The name of the Amazon Kinesis data stream to output Rekognition results.
      This must match the "rekognition_data_stream" given in the
      config/kvs_config.yaml file.
    Default: AmazonRekognitionPersonDetectionSample
Metadata:
  'AWS::CloudFormation::Designer':
    2db7b804-2928-46ab-b53e-a9aaa56380d8:
      size:
        width: 60
        height: 60
      position:
        x: 930
        'y': 250
      z: 0
      embeds: []
      dependson:
        - 50d77c80-d79e-4cb3-84b2-3d00afff7e00
    e92430d9-2179-4e81-87c1-811622bdbfa1:
      size:
        width: 60
        height: 60
      position:
        x: 1090
        'y': 450
      z: 0
      embeds: []
    2fc044ca-96ab-4a07-86b4-8f9186e7e564:
      size:
        width: 60
        height: 60
      position:
        x: 660
        'y': 160
      z: 0
      embeds: []
      dependson:
        - 2008979f-e28d-4a37-98f4-261ec1bcae3a
    be8cf4e7-ebff-4724-9071-2ad4e1b88ab0:
      size:
        width: 60
        height: 60
      position:
        x: 1090
        'y': 190
      z: 0
      embeds: []
    cb2cb419-bb65-4baa-b2a7-7c7744847d84:
      size:
        width: 60
        height: 60
      position:
        x: 1130
        'y': 100
      z: 0
      embeds: []
    2c1d4f3c-3f87-4fbc-a197-d2ade101b01a:
      size:
        width: 60
        height: 60
      position:
        x: 670
        'y': 260
      z: 0
      embeds: []
      dependson:
        - 2fc044ca-96ab-4a07-86b4-8f9186e7e564
        - 2db7b804-2928-46ab-b53e-a9aaa56380d8
    d373b10c-325f-4a30-af55-37b9ab8ee6a6:
      size:
        width: 60
        height: 60
      position:
        x: 670
        'y': 360
      z: 0
      embeds: []
    469e14f9-1a5c-46c4-a9cb-84df0ee65eb9:
      size:
        width: 60
        height: 60
      position:
        x: 860
        'y': 180
      z: 0
      embeds: []
    50d77c80-d79e-4cb3-84b2-3d00afff7e00:
      size:
        width: 60
        height: 60
      position:
        x: 1150
        'y': 280
      z: 0
      embeds: []
    b0ef56ea-5123-4ebf-b88c-bbbfa81fd29f:
      size:
        width: 60
        height: 60
      position:
        x: 1300
        'y': 250
      z: 0
      embeds: []
    2008979f-e28d-4a37-98f4-261ec1bcae3a:
      size:
        width: 60
        height: 60
      position:
        x: 770
        'y': 160
      z: 0
      embeds: []
      isassociatedwith:
        - 2c1d4f3c-3f87-4fbc-a197-d2ade101b01a
    6ccaab09-a72b-46a1-b59e-4853395ec197:
      size:
        width: 60
        height: 60
      position:
        x: 510
        'y': 370
      z: 0
      embeds: []
    608d5a75-777b-40d8-94d2-5d23f5ed40e4:
      size:
        width: 60
        height: 60
      position:
        x: 510
        'y': 470
      z: 0
      embeds: []
    f1c96a35-67fd-41db-aea9-3c4e19e13157:
      size:
        width: 60
        height: 60
      position:
        x: 510
        'y': 270
      z: 0
      embeds: []
      dependson:
        - 2c1d4f3c-3f87-4fbc-a197-d2ade101b01a
        - 2fc044ca-96ab-4a07-86b4-8f9186e7e564
    ac3c1068-6753-42d2-856e-bb5aed235863:
      source:
        id: 2db7b804-2928-46ab-b53e-a9aaa56380d8
      target:
        id: 50d77c80-d79e-4cb3-84b2-3d00afff7e00
      z: 11
Resources:
  CreateRekognitionResources:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName:
        'Fn::Join':
          - '-'
          - - !Ref 'AWS::StackName'
            - CreateRekognitionResources
      Handler: index.lambda_handler
      Role: !GetAtt 
        - CreateRekognitionResourcesRole
        - Arn
      Runtime: python2.7
      Timeout: 10
      Environment:
        Variables:
          DataStreamArn: !GetAtt DataStream.Arn
          StreamProcessorRole: !GetAtt StreamProcessorRole.Arn
      Code:
        ZipFile: !Sub |
          import boto3  
          import json
          import logging
          import traceback
          import os
          import cfnresponse

          def lambda_handler(event, context):
              
                print ('received event:' + json.dumps(event, indent=2))
                
                rekognition_client = boto3.client('rekognition')
                kinesis_video_client = boto3.client('kinesisvideo')
                logger = logging.getLogger()

                if event['RequestType'] == 'Delete':
                    deletion_failed = False

                    try:
                        rekognition_client.delete_stream_processor(Name='${StreamProcessorName}')
                    except rekognition_client.exceptions.ResourceNotFoundException:
                        logging.warning('Stream Processor %s was not found while trying to delete' % '${StreamProcessorName}')
                    except:
                        deleteion_failed = True
                        logger.error("error: {0}".format(traceback.format_exc()));
                        
                    try:
                        kinesis_video_stream_arn = kinesis_video_client.describe_stream(StreamName='${KinesisVideoStreamName}')['StreamInfo']['StreamARN']
                        kinesis_video_client.delete_stream(StreamArn=kinesis_video_stream_arn)
                    except kinesis_video_client.exceptions.ResourceNotFoundException:
                        logging.warning('Kinesis Video Stream %s was not found while trying to delete' % '${KinesisVideoStreamName}')
                    except:
                        deletion_failed = True
                        logger.error("error: {0}".format(traceback.format_exc()));

                    if deletion_failed:
                        cfnresponse.send(event, context, "FAILED", {})  
                    else:
                        cfnresponse.send(event, context, "SUCCESS", {})
                else:
                    #Create Video Stream
                    try:
                        response = kinesis_video_client.create_stream(StreamName='${KinesisVideoStreamName}')
                        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
                            logger.info('Kinesis Video Stream with name %s created' % '${KinesisVideoStreamName}')
                    except kinesis_video_client.exceptions.ResourceInUseException:
                        logger.warning('Kinesis Video Stream with name %s already exists' % '${KinesisVideoStreamName}')
                    except:
                        logger.error("error: {0}".format(traceback.format_exc()));
                        cfnresponse.send(event, context, "FAILED", {})
                    try:
                        kinesis_video_response = kinesis_video_client.describe_stream(StreamName='${KinesisVideoStreamName}')
                        kinesis_video_stream_arn = kinesis_video_response["StreamInfo"]["StreamARN"]
                    except:
                        logger.error("error: {0}".format(traceback.format_exc()));
                        cfnresponse.send(event, context, "FAILED", {})
                    
                    #Create Stream Processor
                    try:
                        rekognition_input = {"KinesisVideoStream":{"Arn":kinesis_video_stream_arn}}
                        rekognition_output = {"KinesisDataStream":{"Arn":os.environ['DataStreamArn']}}
                        rekognition_settings = {"FaceSearch":{"CollectionId":'${CollectionId}',"FaceMatchThreshold":80}}
                        processor_resp = rekognition_client.create_stream_processor(Input=rekognition_input,
                                                                                    Output=rekognition_output,
                                                                                    Name='${StreamProcessorName}',
                                                                                    Settings=rekognition_settings,
                                                                                    RoleArn=os.environ['StreamProcessorRole'])
                        rekognition_client.start_stream_processor(Name='${StreamProcessorName}')
                    except rekognition_client.exceptions.ResourceAlreadyExistsException:
                        logger.warning('Stream Processor with name %s already exists' & '${StreamProcessorName}')
                    except:
                        logger.error("error: {0}".format(traceback.format_exc()));
                        cfnresponse.send(event, context, "FAILED", {})
                    cfnresponse.send(event, context, "SUCCESS", {})
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 2db7b804-2928-46ab-b53e-a9aaa56380d8
    DependsOn:
      - CreateCollection
  DataStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      Name: !Ref RekognitionDataStreamName
      ShardCount: 1
    Metadata:
      'AWS::CloudFormation::Designer':
        id: e92430d9-2179-4e81-87c1-811622bdbfa1
  UploadBucket:
    Type: 'AWS::S3::Bucket'
    DependsOn:
      - RekognitionLambdaPermission
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt LambdaIndexFace.Arn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 2fc044ca-96ab-4a07-86b4-8f9186e7e564
  CreateRekognitionResourcesRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: AmazonRekognition
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'rekognition:StartStreamProcessor'
                  - 'rekognition:CreateStreamProcessor'
                  - 'kinesisvideo:CreateStream'
                  - 'kinesisvideo:DeleteStream'
                  - 'kinesisvideo:DescribeStream'
                  - 'rekognition:CreateCollection'
                  - 'rekognition:DeleteCollection'
                  - 'rekognition:ListCollections'
                  - 'iam:PassRole'
                Resource: '*'
        - PolicyName: AWSLambdaLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: be8cf4e7-ebff-4724-9071-2ad4e1b88ab0
  StreamProcessorRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - rekognition.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: AmazonRekognitionKinesis
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'kinesis:PutRecord'
                  - 'kinesis:PutRecords'
                Resource: '*'
        - PolicyName: AmazonRekognitionVideo
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'kinesisvideo:GetDataEndpoint'
                  - 'kinesisvideo:GetMedia'
                Resource: '*'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: cb2cb419-bb65-4baa-b2a7-7c7744847d84
  LambdaIndexFace:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - CreateRekognitionResources
    Properties:
      Description: >-
        Triggered by S3, indexes faces against a collection in Amazon
        Rekognition
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaIndexFacesRole.Arn
      Runtime: python2.7
      Timeout: 5
      FunctionName: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - IndexFaces
      Code:
        ZipFile: !Sub |
          from __future__ import print_function

          import boto3
          from decimal import Decimal
          import json
          import urllib

          print('Loading function')

          s3 = boto3.client('s3')
          rekognition = boto3.client('rekognition')


          # --------------- Helper Functions ------------------

          def index_faces(bucket, key):
              image_name = key.split("/")[-1]
              image_name = image_name.split(".")[0]
              response = rekognition.index_faces(
                Image={"S3Object":
                  {"Bucket": bucket,
                  "Name": key}},
                  CollectionId="${CollectionId}",
                  ExternalImageId=image_name)
              return response

          # --------------- Main handler ------------------

          def lambda_handler(event, context):

              # Get the object from the event
              bucket = event['Records'][0]['s3']['bucket']['name']
              key = urllib.unquote_plus(
                event['Records'][0]['s3']['object']['key'].encode('utf8'))

              try:

                  # Calls Amazon Rekognition IndexFaces API to detect faces in S3 object
                  # to index faces into specified collection

                  response = index_faces(bucket, key)
                  
                  # Print response to console.
                  print(response)

                  return response
              except Exception as e:
                  print(e)
                  print("Error processing {} from bucket {}. ".format(key, bucket)) 
                  raise e
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 2c1d4f3c-3f87-4fbc-a197-d2ade101b01a
  LambdaIndexFacesRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: LambdaIndexFaces
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Join 
                  - ''
                  - - !Join 
                      - ':'
                      - - arn
                        - aws
                        - s3
                        - ''
                        - ''
                        - !Ref BucketName
                    - /*
              - Effect: Allow
                Action:
                  - 'rekognition:IndexFaces'
                Resource: '*'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: d373b10c-325f-4a30-af55-37b9ab8ee6a6
  PopulateCreateRekognitionResources:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt CreateRekognitionResources.Arn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 469e14f9-1a5c-46c4-a9cb-84df0ee65eb9
  CreateCollection:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName:
        'Fn::Join':
          - '-'
          - - !Ref 'AWS::StackName'
            - CreateCollection
      Handler: index.lambda_handler
      Role: !GetAtt 
        - CreateRekognitionResourcesRole
        - Arn
      Runtime: python2.7
      Timeout: 10
      Environment:
        Variables:
          DataStreamArn: !GetAtt DataStream.Arn
          StreamProcessorRole: !GetAtt StreamProcessorRole.Arn
      Code:
        ZipFile: !Sub |
          import boto3  
          import json
          import logging
          import traceback
          import cfnresponse

          def lambda_handler(event, context):
              
                print ('received event:' + json.dumps(event, indent=2))
                
                rekognition_client = boto3.client('rekognition')
                kinesis_video_client = boto3.client('kinesisvideo')
                logger = logging.getLogger()

                if event['RequestType'] == 'Delete':     

                    try:
                        rekognition_client.delete_collection(CollectionId='${CollectionId}')
                    except rekognition_client.exceptions.ResourceNotFoundException:
                        logging.warning('Collection %s was not found while trying to delete' % '${CollectionId}')
                    except:
                        logger.error("error: {0}".format(traceback.format_exc()));
                        cfnresponse.send(event, context, "FAILED", {})  
                    cfnresponse.send(event, context, "SUCCESS", {})
                    
                else:
                    # Create Collection
                    try:
                        ret = rekognition_client.create_collection(CollectionId='${CollectionId}')
                        if ret['ResponseMetadata']['HTTPStatusCode'] == 200:
                            logger.info('Collection with name %s created' % '${CollectionId}')
                    except rekognition_client.exceptions.ResourceAlreadyExistsException:
                            logger.warning('Collection with name %s already exists' % '${CollectionId}')
                    except:
                        logger.error("error: {0}".format(traceback.format_exc()));
                        cfnresponse.send(event, context, "FAILED", {})
                    
                    cfnresponse.send(event, context, "SUCCESS", {})
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 50d77c80-d79e-4cb3-84b2-3d00afff7e00
  PopulateCreateCollection:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt CreateCollection.Arn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: b0ef56ea-5123-4ebf-b88c-bbbfa81fd29f
  RekognitionLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !GetAtt LambdaIndexFace.Arn
      Principal: s3.amazonaws.com
      SourceArn: !Join 
        - ':'
        - - arn
          - aws
          - s3
          - ''
          - ''
          - !Ref BucketName
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 2008979f-e28d-4a37-98f4-261ec1bcae3a
  LambdaCopyImages:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName:
        'Fn::Join':
          - '-'
          - - !Ref 'AWS::StackName'
            - CopyImages
      Handler: index.lambda_handler
      Role: !GetAtt 
        - LambdaCopyImagesRole
        - Arn
      Runtime: python2.7
      Timeout: 10
      Code:
        ZipFile: !Sub |
          import boto3  
          import json
          import logging
          import traceback
          import cfnresponse

          keys = ["1.0/person-detection/assets/asimov.jpg"]

          def lambda_handler(event, context):
              
                s3_client = boto3.client('s3')
                logger = logging.getLogger()

                if event['RequestType'] == 'Create':     
                    try:
                        for key in keys:
                            source = {
                              'Bucket':'${SourceBucket}',
                              'Key':key
                            }
                            s3_client.copy(source, '${BucketName}', key)
                    except:
                        logger.error("error: {0}".format(traceback.format_exc()));
                        cfnresponse.send(event, context, "FAILED", {})  
                    cfnresponse.send(event, context, "SUCCESS", {})
                    
                else:
                    cfnresponse.send(event, context, "SUCCESS", {})
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 6ccaab09-a72b-46a1-b59e-4853395ec197
  LambdaCopyImagesRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: LambdaCopyImages
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: !Join 
                  - ''
                  - - !Join 
                      - ':'
                      - - arn
                        - aws
                        - s3
                        - ''
                        - ''
                        - !Ref BucketName
                    - /*
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: '*'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 608d5a75-777b-40d8-94d2-5d23f5ed40e4
  PopulateCopyImages:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt LambdaCopyImages.Arn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: f1c96a35-67fd-41db-aea9-3c4e19e13157
    DependsOn:
      - LambdaIndexFace
      - UploadBucket
